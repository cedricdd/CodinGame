<?php

const PRIMES = [2 => 1, 3 => 1, 5 => 1, 7 => 1, 11 => 1, 13 => 1, 17 => 1, 19 => 1, 23 => 1, 29 => 1, 31 => 1, 37 => 1, 41 => 1, 43 => 1, 47 => 1, 53 => 1, 59 => 1, 61 => 1, 67 => 1, 71 => 1, 73 => 1, 79 => 1, 83 => 1, 89 => 1, 97 => 1, 101 => 1, 103 => 1, 107 => 1, 109 => 1, 113 => 1, 127 => 1, 131 => 1, 137 => 1, 139 => 1, 149 => 1, 151 => 1, 157 => 1, 163 => 1, 167 => 1, 173 => 1, 179 => 1, 181 => 1, 191 => 1, 193 => 1, 197 => 1, 199 => 1, 211 => 1, 223 => 1, 227 => 1, 229 => 1, 233 => 1, 239 => 1, 241 => 1, 251 => 1, 257 => 1, 263 => 1, 269 => 1, 271 => 1, 277 => 1, 281 => 1, 283 => 1, 293 => 1, 307 => 1, 311 => 1, 313 => 1, 317 => 1, 331 => 1, 337 => 1, 347 => 1, 349 => 1, 353 => 1, 359 => 1, 367 => 1, 373 => 1, 379 => 1, 383 => 1, 389 => 1, 397 => 1, 401 => 1, 409 => 1, 419 => 1, 421 => 1, 431 => 1, 433 => 1, 439 => 1, 443 => 1, 449 => 1, 457 => 1, 461 => 1, 463 => 1, 467 => 1, 479 => 1, 487 => 1, 491 => 1, 499 => 1, 503 => 1, 509 => 1, 521 => 1, 523 => 1, 541 => 1, 547 => 1, 557 => 1, 563 => 1, 569 => 1, 571 => 1, 577 => 1, 587 => 1, 593 => 1, 599 => 1, 601 => 1, 607 => 1, 613 => 1, 617 => 1, 619 => 1, 631 => 1, 641 => 1, 643 => 1, 647 => 1, 653 => 1, 659 => 1, 661 => 1, 673 => 1, 677 => 1, 683 => 1, 691 => 1, 701 => 1, 709 => 1, 719 => 1, 727 => 1, 733 => 1, 739 => 1, 743 => 1, 751 => 1, 757 => 1, 761 => 1, 769 => 1, 773 => 1, 787 => 1, 797 => 1, 809 => 1, 811 => 1, 821 => 1, 823 => 1, 827 => 1, 829 => 1, 839 => 1, 853 => 1, 857 => 1, 859 => 1, 863 => 1, 877 => 1, 881 => 1, 883 => 1, 887 => 1, 907 => 1, 911 => 1, 919 => 1, 929 => 1, 937 => 1, 941 => 1, 947 => 1, 953 => 1, 967 => 1, 971 => 1, 977 => 1, 983 => 1, 991 => 1, 997 => 1, 1009 => 1, 1013 => 1, 1019 => 1, 1021 => 1, 1031 => 1, 1033 => 1, 1039 => 1, 1049 => 1, 1051 => 1, 1061 => 1, 1063 => 1, 1069 => 1, 1087 => 1, 1091 => 1, 1093 => 1, 1097 => 1, 1103 => 1, 1109 => 1, 1117 => 1, 1123 => 1, 1129 => 1, 1151 => 1, 1153 => 1, 1163 => 1, 1171 => 1, 1181 => 1, 1187 => 1, 1193 => 1, 1201 => 1, 1213 => 1, 1217 => 1, 1223 => 1, 1229 => 1, 1231 => 1, 1237 => 1, 1249 => 1, 1259 => 1, 1277 => 1, 1279 => 1, 1283 => 1, 1289 => 1, 1291 => 1, 1297 => 1, 1301 => 1, 1303 => 1, 1307 => 1, 1319 => 1, 1321 => 1, 1327 => 1, 1361 => 1, 1367 => 1, 1373 => 1, 1381 => 1, 1399 => 1, 1409 => 1, 1423 => 1, 1427 => 1, 1429 => 1, 1433 => 1, 1439 => 1, 1447 => 1, 1451 => 1, 1453 => 1, 1459 => 1, 1471 => 1, 1481 => 1, 1483 => 1, 1487 => 1, 1489 => 1, 1493 => 1, 1499 => 1, 1511 => 1, 1523 => 1, 1531 => 1, 1543 => 1, 1549 => 1, 1553 => 1, 1559 => 1, 1567 => 1, 1571 => 1, 1579 => 1, 1583 => 1, 1597 => 1, 1601 => 1, 1607 => 1, 1609 => 1, 1613 => 1, 1619 => 1, 1621 => 1, 1627 => 1, 1637 => 1, 1657 => 1, 1663 => 1, 1667 => 1, 1669 => 1, 1693 => 1, 1697 => 1, 1699 => 1, 1709 => 1, 1721 => 1, 1723 => 1, 1733 => 1, 1741 => 1, 1747 => 1, 1753 => 1, 1759 => 1, 1777 => 1, 1783 => 1, 1787 => 1, 1789 => 1, 1801 => 1, 1811 => 1, 1823 => 1, 1831 => 1, 1847 => 1, 1861 => 1, 1867 => 1, 1871 => 1, 1873 => 1, 1877 => 1, 1879 => 1, 1889 => 1, 1901 => 1, 1907 => 1, 1913 => 1, 1931 => 1, 1933 => 1, 1949 => 1, 1951 => 1, 1973 => 1, 1979 => 1, 1987 => 1, 1993 => 1, 1997 => 1, 1999 => 1];

$inputs = explode("/", trim(fgets(STDIN)));

/*
 * N = P1 ^ x1 * Pn ^ xn where P1 ... Pn are prime factors and x1 ... xn their exponents 
 * Since we are using factorial when we use Pn ^ xn we need to divide by (Pn - 1) ^ xn which is similar to multiply by (Pn - 1) ^ -xn
 */
function solve(int $n): array {
    static $results = [1 => []];

    //We already know the factorials of primes decomposition
    if(isset($results[$n])) return $results[$n];

    $leftToDecompose = $n;

    foreach(PRIMES as $prime => $filler) {
        $exponent = 0;

        while ($leftToDecompose % $prime == 0) {
            $exponent++;
            $leftToDecompose /= $prime;
        }

        //We found a prime factor
        if($exponent > 0) {
            $result[$prime] = ($result[$prime] ?? 0) + $exponent;

            //Since we are using P! and we only need P we need to divide by P-1!
            while($prime > 2) {
                //It is a prime we can use it
                if(isset(PRIMES[--$prime])) {
                    $result[$prime] = ($result[$prime] ?? 0) - $exponent;
                    break;
                } //The number is not a prime, we need to use it factorials of primes decomposition
                else {
                    foreach(solve($prime) as $prime2 => $exponent2) {
                        $result[$prime2] = ($result[$prime2] ?? 0) - ($exponent * $exponent2);
                    }
                }
            }

            if($leftToDecompose == 1) break; //We have found all the prime factors
        }
    }

    return $results[$n] = $result;
}

$result = solve($inputs[0]); //numerator

//denominator
foreach(solve($inputs[1] ?? 1) as $prime => $power) {
    $result[$prime] = ($result[$prime] ?? 0) - $power; //We use the negative power
}

krsort($result); //We need to display primes in ascending order

//Don't show prime with a negative power
foreach($result as $prime => $power) {
    if($power != 0) $answer[] = $prime . "#" . $power;
}

echo implode(" ", $answer) . PHP_EOL;
