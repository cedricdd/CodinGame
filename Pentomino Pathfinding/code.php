<?php

const PENTOMINOS = [
    'F' => [
        [[0, 0], [1, 0], [0, 1], [-1, 1], [0, 2]],
        [[0, 0], [0, 1], [1, 1], [0, 2], [-1, 2]],
        [[0, 0], [0, 1], [-1, 1], [1, 1], [1, 2]],
        [[0, 0], [0, 1], [1, 1], [2, 1], [1, 2]],
        [[0, 0], [0, 1], [1, 1], [-1, 1], [-1, 2]],
        [[0, 0], [0, 1], [-1, 1], [-1, 2], [-2, 1]],
        [[0, 0], [1, 0], [1, 1], [2, 1], [1, 2]],
        [[0, 0], [0, 1], [-1, 1], [0, 2], [1, 2]],
    ],
    'I' => [
        [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0]],
        [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4]],
    ],
    'L' => [
        [[0, 0], [0, 1], [0, 2], [0, 3], [1, 3]],
        [[0, 0], [1, 0], [1, 1], [1, 2], [1, 3]],
        [[0, 0], [0, 1], [1, 0], [2, 0], [3, 0]],
        [[0, 0], [0, 1], [-1, 1], [-2, 1], [-3, 1]],
        [[0, 0], [1, 0], [2, 0], [3, 0], [3, 1]],
        [[0, 0], [0, 1], [1, 1], [2, 1], [3, 1]],
        [[0, 0], [0, 1], [0, 2], [0, 3], [-1, 3]],
        [[0, 0], [1, 0], [0, 1], [0, 2], [0, 3]],
    ],
    'N' => [
        [[0, 0], [0, 1], [-1, 1], [-1, 2], [-1, 3]],
        [[0, 0], [0, 1], [0, 2], [-1, 2], [-1, 3]],
        [[0, 0], [1, 0], [2, 0], [2, 1], [3, 1]],
        [[0, 0], [1, 0], [1, 1], [2, 1], [3, 1]],
        [[0, 0], [1, 0], [2, 0], [0, 1], [-1, 1]],
        [[0, 0], [1, 0], [0, 1], [-1, 1], [-2, 1]],
        [[0, 0], [0, 1], [1, 1], [1, 2], [1, 3]],
        [[0, 0], [0, 1], [0, 2], [1, 2], [1, 3]],
    ],
    'P' => [
        [[0, 0], [0, 1], [-1, 1], [0, 2], [-1, 2]],
        [[0, 0], [1, 0], [0, 1], [1, 1], [0, 2]],
        [[0, 0], [1, 0], [0, 1], [1, 1], [2, 1]],
        [[0, 0], [1, 0], [1, 1], [2, 0], [2, 1]],
        [[0, 0], [1, 0], [0, 1], [-1, 1], [1, 1]],
        [[0, 0], [1, 0], [2, 0], [0, 1], [1, 1]],
        [[0, 0], [0, 1], [1, 1], [0, 2], [1, 2]],
        [[0, 0], [1, 0], [0, 1], [1, 1], [1, 2]],
    ],
    'T' => [
        [[0, 0], [1, 0], [1, 1], [1, 2], [2, 0]],
        [[0, 0], [0, 1], [0, 2], [-1, 2], [1, 2]],
        [[0, 0], [0, 1], [-1, 1], [-2, 1], [0, 2]],
        [[0, 0], [0, 1], [1, 1], [2, 1], [0, 2]],
    ],
    'U' => [
        [[0, 0], [1, 0], [0, 1], [0, 2], [1, 2]],
        [[0, 0], [1, 0], [1, 1], [1, 2], [0, 2]],
        [[0, 0], [0, 1], [1, 0], [2, 0], [2, 1]],
        [[0, 0], [0, 1], [1, 1], [2, 1], [2, 0]],
    ],
    'V' => [
        [[0, 0], [0, 1], [0, 2], [1, 2], [2, 2]],
        [[0, 0], [1, 0], [2, 0], [0, 1], [0, 2]],
        [[0, 0], [1, 0], [2, 0], [2, 1], [2, 2]],
        [[0, 0], [0, 1], [0, 2], [-1, 2], [-2, 2]],
    ],
    'W' => [
        [[0, 0], [0, 1], [1, 1], [1, 2], [2, 2]],
        [[0, 0], [1, 0], [1, 1], [2, 1], [2, 2]],
        [[0, 0], [1, 0], [0, 1], [-1, 1], [-1, 2]],
        [[0, 0], [0, 1], [-1, 1], [-1, 2], [-2, 2]],
        [[0, 0], [1, 0], [1, 1], [2, 1], [2, 2]],
        [[0, 0], [0, 1], [1, 1], [1, 2], [2, 2]],
        [[0, 0], [0, 1], [-1, 1], [-1, 2], [-2, 2]],
        [[0, 0], [1, 0], [0, 1], [-1, 1], [-1, 2]],
    ],
    'X' => [
        [[0, 0], [-1, 1], [0, 1], [1, 1], [0, 2]],
    ],
    'Y' => [
        [[0, 0], [0, 1], [-1, 1], [0, 2], [0, 3]],
        [[0, 0], [0, 1], [-1, 1], [-2, 1], [1, 1]],
        [[0, 0], [0, 1], [0, 2], [1, 2], [0, 3]],
        [[0, 0], [1, 0], [1, 1], [2, 0], [3, 0]],
        [[0, 0], [0, 1], [-1, 1], [1, 1], [2, 1]],
        [[0, 0], [1, 0], [2, 0], [3, 0], [2, 1]],
        [[0, 0], [0, 1], [1, 1], [0, 2], [0, 3]],
        [[0, 0], [0, 1], [0, 2], [-1, 2], [0, 3]],
    ],
    'Z' => [
        [[0, 0], [1, 0], [1, 1], [1, 2], [2, 2]],
        [[0, 0], [0, 1], [-1, 1], [-2, 1], [-2, 2]],
        [[0, 0], [0, 1], [1, 1], [2, 1], [2, 2]],
        [[0, 0], [1, 0], [0, 1], [0, 2], [-1, 2]],
    ],
];

function solve(array $map, array $counts, int $x = 1, int $y = 1): bool {
    global $width, $height, $maxCount;

    $chars = count_chars(implode('', $map), 1);

    //We have checked everything, it's valid
    if(($chars[35] ?? 0) + ($chars[46] ?? 0) == $width * $height) return true;

    $valid = false;

    for(; $y < $height - 1; ++$y) {
        for($x = 1; $x < $width - 1; ++$x) {
            if($map[$y][$x] != '.' && $map[$y][$x] != '#') {
                $c = $map[$y][$x];

                //Test every possible pentominos starting here
                foreach(PENTOMINOS as $letter => $rotations) {
                    if($counts[$letter] == $maxCount) continue; //We can't use more of this letter

                    foreach($rotations as $positions) {
                        foreach($positions as [$xm, $ym]) {
                            if($map[$y + $ym][$x + $xm] != $c) continue 2; //It doesn't cover the shape
                        }

                        $map2 = $map;

                        foreach($positions as [$xm, $ym]) {
                            $map2[$y + $ym][$x + $xm] = '.';
                        }

                        $counts[$letter]++;
                        $valid |= solve($map2, $counts, $x, $y); //We test by using this letter at the position
                        $counts[$letter]--;
                    }
                }

                return $valid;
            }
        }
    }

    return $valid;
}

$start = microtime(1);

fscanf(STDIN, "%d %d", $width, $height);
fscanf(STDIN, "%d", $maxCount);
for ($i = 0; $i < $height; $i++) {
    $map[] = stream_get_line(STDIN, $width + 1, "\n");
}

// error_log(var_export(count_chars(implode('', $map), 1), 1));

foreach(count_chars(implode('', $map), 1) as $c => $v) {
    if($c != 35 && $c != 46 && ($v % 5) != 0) exit("Board is invalid.\n0");
}

error_log(var_export($map, 1));

if(!solve($map, array_combine(range('F', 'Z'), array_fill(0, 21, 0)))) exit("Board is invalid.\n0");

$longest = 0;

for($y = 1; $y < $height - 1; ++$y) {
    for($x = 1; $x < $width - 1; ++$x) {
        if($map[$y][$x] == '.') {
            $history = [];
            $count = 0;
            $toCheck = [$y => [$x => 1]];

            while(true) {
                $newCheck = [];

                // error_log($count);
                // error_log(var_export($toCheck, 1));

                foreach($toCheck as $y2 => $line) {
                    foreach($line as $x2 => $filler) {
                        $history[$y2][$x2] = 1;
    
                        foreach([[0, 1], [0, -1], [1, 0], [-1, 0]] as [$xm, $ym]) {
                            $xu = $x2 + $xm;
                            $yu = $y2 + $ym;
    
                            if($map[$yu][$xu] == '.' && !isset($history[$yu][$xu])) $newCheck[$yu][$xu] = 1;
                        }
                    }
                }

                if($newCheck) {
                    ++$count;
                    $toCheck = $newCheck;
                } else {
                    $longest = max($longest, $count);
                    break;
                }
            }
        }
    }
}

echo "Board has valid pieces." . PHP_EOL;
echo $longest . PHP_EOL;

error_log(microtime(1) - $start);
