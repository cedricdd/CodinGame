https://www.codingame.com/contribute/view/29649c6f594e71b69c8ca2567c8acfa06e207

Goal

You are given an integer n and a n times n grid of digits.
You start at (0,0) with a starting cost equal to grid(0,0) and your objective is to reach the bottom right (n-1, n-1) with minimal cost.
You are also given an array named costs of n-1 integers 0 < c_1 < c_2 < ... < c_(n-1) representing the costs of the distance (cf. below):
At any turn you can move from (i, j) to any point (i',j') (different of (i, j)) in the grid paying a cost equal to the sum of:
- the value of the grid at (i',j'), grid(i', j')
- the cost of moving a distance (infinity norm) equal to d. That is, if we go from (i, j) to (i', j') with d = max(abs(i-i'), abs(j-j')) , the costs of moving an amount equal to d is the integer at the (d-1)-th index in costs table.

Find the minimum cost!

Input
Line 1: An integer n for the number of points to compare.
Line 2: A space separated string costs with n-1 elements, representing the cost of the distance.
Next N lines: The rows of the n times n grid

Output
Line 1: An integer for the minimum cost required to reach the target.
Constraints

In costs, the n-1 integers satisfy: 0 < c_1 < c_2 < ... < c_(n-1)
3 <= n <= 6
